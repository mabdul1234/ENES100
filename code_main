#include <Enes100.h>

float x, y, theta;

//Used for timing
unsigned long e = 10;  

//Defines variable duration used for finding time of wave (ULTRASONIC)
float duration;

//Defines variable distance used for finding distance of wave (ULTRASONIC)
float distance;

//Now LED! is 4, this sounds like the C++ stuff
#define LED1 4;  

//Motor A Connections:
int enA = 13;
int in1 = 12;
int in2 = 11;

//Motor B Connections:
int enB = 8;
int in3 = 10;
int in4 = 9;

//Motor C Connections:
int enC = 7;
int in5 = 6;
int in6 = 5;

//Motor D Connections:
int enD = 2;
int in7 = 4;
int in8 = 3;

//Ultrasonic Connections 
int echoPin = 24;
int trigPin = 26;

void forward_Control(){
 digitalWrite(in1, LOW); 
 digitalWrite(in2, HIGH);
 digitalWrite(in3, LOW);
 digitalWrite(in4, HIGH);
 digitalWrite(in5, HIGH);
 digitalWrite(in6, LOW);
 digitalWrite(in7, HIGH);
 digitalWrite(in8, LOW);
 delay(1000);
}

void back_Control(){
 digitalWrite(in1, HIGH); 
 digitalWrite(in2, LOW);
 digitalWrite(in3, HIGH);
 digitalWrite(in4, LOW);
 digitalWrite(in5, LOW);
 digitalWrite(in6, HIGH);
 digitalWrite(in7, LOW);
 digitalWrite(in8, HIGH);
}

void move_right(){
 digitalWrite(in1, HIGH); 
 digitalWrite(in2, LOW);
 digitalWrite(in3, LOW);
 digitalWrite(in4, HIGH);
 digitalWrite(in5, LOW);
 digitalWrite(in6, HIGH);
 digitalWrite(in7, HIGH);
 digitalWrite(in8, LOW);
}

void move_left(){
 digitalWrite(in1, LOW); 
 digitalWrite(in2, HIGH);
 digitalWrite(in3, HIGH);
 digitalWrite(in4, LOW);
 digitalWrite(in5, HIGH);
 digitalWrite(in6, LOW);
 digitalWrite(in7, LOW);
 digitalWrite(in8, HIGH);
}

void speedControl(){
 int i = 75;
 analogWrite(enA, i);
 analogWrite(enB, i);
 analogWrite(enC, i);
 analogWrite(enD, i);
 delay(20);
}

//what direction is this?
void start_turning (){
digitalWrite (in1, LOW);
digitalWrite (in2, HIGH);
digitalWrite (in3, LOW);
digitalWrite(in4, HIGH);
digitalWrite(in5, LOW);
digitalWrite(in6, HIGH);
digitalWrite(in7, LOW);
digitalWrite(in8, HIGH);
}

void stop_OSV (){
digitalWrite(in1, LOW);
digitalWrite(in2, LOW);
digitalWrite(in3, LOW);
digitalWrite(in4, LOW);
digitalWrite(in5, LOW);
digitalWrite(in6, LOW);
digitalWrite(in7, LOW);
digitalWrite(in8, LOW);
}

void ultrasonic_Distance () {
digitalWrite(trigPin, LOW);
delayMicroseconds(20);
digitalWrite(trigPin, HIGH);
delayMicroseconds(100);
//Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
//Calculating the distance
distance = (duration * 0.034 ) / 2;
}

void width () {
while (distance < 5){
  move_left();
}
stop_OSV();
delay(3000);
move_right();
delay(100);
stop_OSV();
delay(2000);

unsigned long StartTime = millis();

while (distance < 5){
  move_right();
}
stop_OSV();
unsigned long CurrentTime = millis();
unsigned long ElapsedTime = CurrentTime - StartTime;
delay(3000);
}

void setup() {

//TEST ARUCO MARKER IS 19 BUT ACTUAL IS 231
Enes100.begin("CRASH", CRASH_SITE, 19, 50, 22); 

//Motor pins
pinMode(enA, OUTPUT);
pinMode(enB, OUTPUT);
pinMode(enC, OUTPUT);
pinMode(enD, OUTPUT);
pinMode(in1, OUTPUT);
pinMode(in2, OUTPUT);
pinMode(in3, OUTPUT);
pinMode(in4, OUTPUT);
pinMode(in5, OUTPUT);
pinMode(in6, OUTPUT);
pinMode(in7, OUTPUT);
pinMode(in8, OUTPUT);

//Ultrasonic sensor pins
pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);

//Serial.begin(9600);
}

void loop() {

Enes100.updateLocation(); //updates x and Y arcuo marker values

bool v = Enes100.isVisible(); //is the aruco marker visible?

float x = Enes100.getX();
Enes100.println("This is x: ");
//Print x coordinate to vision system
Enes100.println(x); 
delay(5000);

float y = Enes100.getY();
Enes100.println("This is y: ");
//Print y coordinate to vision system 
Enes100.println(y); 
delay(2000);

//Get distance using ultrasonic sensor
ultrasonic_Distance();
Enes100.println("This is distance: ");
//Print distance to vision system
Enes100.println(distance);
delay(2000);

float theta = Enes100.getTheta();
Enes100.println("This is theta: ");
//Print theta to vision system
Enes100.println(theta);
delay(5000);

//Turn on Motors
speedControl(); 

while (theta > 0) {
  start_turning();
}

while (x < 3.5){
forward_Control();
}

stop_OSV();

//While Y is not close to the box go forward and keep updating variables until between 1.3 and 1.5 
if (y < 0.65 && y > 0.5){
forward_Control();
Enes100.updateLocation();
Enes100.println("This is y: ");
Enes100.println(y);
Enes100.println("This is x: ");
Enes100.println(x);
Enes100.println("This is theta: ");
Enes100.println(theta);
}
else{
  stop_OSV();
  if (distance > 56 && distance < 62){
    Enes100.println("The height of the box is 26 cm!");
  }
}


//Height
if (distance > 56 && distance < 62){
Enes100.println("The height of the box is 26 cm!");
stop_OSV();
}
else if (distance > 36 && distance < 42){
Enes100.println("The height of the box is 18 cm!");
stop_OSV();
}
else if (distance > 21 && distance < 31) {
Enes100.println("The height of the box is 13.5 cm!");
stop_OSV();
}
}
 
