void width() {

  int xStart;
  
  int xEnd;
  
  int width;
  
    while (distance < 40) {
      move_right();
      ultrasonic_Distance ();
    }
    stop_OSV();
  
    speedControl();
    move_left();
    delay (15);
    stop_OSV();
  
    xStart = Enes100.getX();
  
    speedControl();
    while (distance < 40) {
      move_left();
      ultrasonic_Distance ();
    }
    stop_OSV();
    xEnd = Enes100.getX();
    width = abs(xStart - xEnd);

}

void moveSide(int dis, char dir) {

  int startY = Enes100.getY();

  if (dir == 'l') { //left

    while (abs(y - startY) < dis) {
      move_left();
      y = Enes100.getY();
    }
    stop_OSV();
  }

  if (dir == 'r') { //right

     while (abs(y - startY) < dis) {
      move_right();
      y = Enes100.getY();
     }
      stop_OSV();
  }
  
}


void move_left(){
 digitalWrite(in1, LOW); 
 digitalWrite(in2, HIGH);
 digitalWrite(in3, HIGH);
 digitalWrite(in4, LOW);
 digitalWrite(in5, HIGH);
 digitalWrite(in6, LOW);
 digitalWrite(in7, LOW);
 digitalWrite(in8, HIGH);
}

void start_turning_CW (){
digitalWrite (in1, LOW);
digitalWrite (in2, HIGH);
digitalWrite (in3, LOW);
digitalWrite(in4, HIGH);
digitalWrite(in5, LOW);
digitalWrite(in6, HIGH);
digitalWrite(in7, LOW);
digitalWrite(in8, HIGH);
}


void start_turning_CCW(float target){

while(abs(theta - target) >= 0.02) {
digitalWrite (in1, HIGH);
digitalWrite (in2, LOW);
digitalWrite (in3, HIGH);
digitalWrite(in4, LOW);
digitalWrite(in5, HIGH);
digitalWrite(in6, LOW);
digitalWrite(in7, HIGH);
digitalWrite(in8, LOW);
delay(25);
stop_OSV();
delay(25);
theta = Enes100.getTheta();
 }
stop_OSV();
}


void update_Variables() {

Enes100.updateLocation();

while (x < 0 || y < 0 || theta < -3.14 || theta > 3.14) {
Enes100.updateLocation();
Enes100.println("This is y: ");
y = Enes100.getY();
Enes100.println(y);
Enes100.println("This is x: ");
x = Enes100.getX();
Enes100.println(x);
Enes100.println("This is theta: ");
theta = Enes100.getTheta();
Enes100.println(theta);
ultrasonic_Distance();
Enes100.println("This is distance: ");
Enes100.println(distance);
delay(1000);
}

Enes100.println("This is y: ");
y = Enes100.getY();
Enes100.println(y);
Enes100.println("This is x: ");
x = Enes100.getX();
Enes100.println(x);
Enes100.println("This is theta: ");
theta = Enes100.getTheta();
Enes100.println(theta);
ultrasonic_Distance();
Enes100.println("This is distance: ");
Enes100.println(distance);
delay(1000);
}

void setup() {

//TEST ARUCO MARKER IS 19 BUT ACTUAL IS 231
Enes100.begin("CRASH", CRASH_SITE, 231, 50, 22); 

//Motor pins
pinMode(enA, OUTPUT);
pinMode(enB, OUTPUT);
pinMode(enC, OUTPUT);
pinMode(enD, OUTPUT);
pinMode(in1, OUTPUT);
pinMode(in2, OUTPUT);
pinMode(in3, OUTPUT);
pinMode(in4, OUTPUT);
pinMode(in5, OUTPUT);
pinMode(in6, OUTPUT);
pinMode(in7, OUTPUT);
pinMode(in8, OUTPUT);

//Ultrasonic sensor pins
pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);
}

void loop() {

  //Updates x and Y arcuo marker values
  Enes100.updateLocation(); 
  
  //Is the aruco marker visible?
  bool v = Enes100.isVisible(); 
  
  //Initial location
  update_Variables();
  
  //Turn on Motors
  speedControl(); 
  
  
  if (y < 1) { //pos 1
      start_turning_CCW(1.57);
      stop_OSV();
      delay(1000);
      
    stop_OSV();
    delay(1000);
   
  }
  else { //pos 2
      start_turning_CCW(-1.57);
      stop_OSV();
      delay(1000);
      }

  testHeight();


}

/*
//Height MIGHT NOT BE USED CUZ NEW ULTRASONIC
if (distance > 56 && distance < 62){
Enes100.println("The height of the box is 26 cm!");
stop_OSV();
}
else if (distance > 36 && distance < 42){
Enes100.println("The height of the box is 18 cm!");
stop_OSV();
}
else if (distance > 21 && distance < 31) {
Enes100.println("The height of the box is 13.5 cm!");
stop_OSV();
}
*/
