#include <Enes100.h>

float x, y, theta;


float long_time = 10000;

#include <ezButton.h>


ezButton limitSwitch(30);  // create ezButton object that attach to pin 7;

String color;

int frequencyR, frequencyG, frequencyB;

//Used for timing
unsigned long e = 10;  

boolean pos1 = false;   
boolean pos2 = false;

//Now LED! is 4, this sounds like the C++ stuff
#define LED1 4;  

int trigPin = 26;
int echoPin = 24;

int trig2Pin = 37;
int echo2Pin = 41;

int duration, distance, duration2, distance2;

//color sensor

int s0 = 48;
int s1 = 46;
int s2 = 42;
int s3 = 44;
int sensOUT = 40;


//Motor A Connections:
int enA = 13;
int in1 = 12;
int in2 = 11;

//Motor B Connections:
int enB = 8;
int in3 = 10;
int in4 = 9;

//Motor C Connections:
int enC = 7;
int in5 = 6;
int in6 = 5;

//Motor D Connections:
int enD = 2;
int in7 = 4;
int in8 = 3;



void speedControl(){
 int i = 255;
 analogWrite(enA, i);
 analogWrite(enB, i);
 analogWrite(enC, i);
 analogWrite(enD, i);
}

float adjustWidth(float width) {
    // Calculate absolute differences
    float diff_27 = abs(27 - width);
    float diff_18 = abs(18 - width);
    float diff_13_5 = abs(13.5 - width);

    // Find the minimum difference
    float min_diff = min(min(diff_27, diff_18), diff_13_5);

    // Adjust width based on the minimum difference
    if (width > 20) {
      return 27;
    }
    else if (min_diff == diff_27) {
        return 27;
    } else if (min_diff == diff_18) {
        return 18;
    } else {
        return 13.5;
    }
}

void stop_OSV (){
digitalWrite(in1, LOW);
digitalWrite(in2, LOW);
digitalWrite(in3, LOW);
digitalWrite(in4, LOW);
digitalWrite(in5, LOW);
digitalWrite(in6, LOW);
digitalWrite(in7, LOW);
digitalWrite(in8, LOW);
}

void ultrasonic_Distance () {
digitalWrite(trigPin, LOW);
delayMicroseconds(20);
digitalWrite(trigPin, HIGH);
delayMicroseconds(100);
//Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
//Calculating the distance
distance = (duration * 0.034 ) / 2;
}

void forward_Control(){
 digitalWrite(in1, LOW); 
 digitalWrite(in2, HIGH);
 digitalWrite(in3, LOW);
 digitalWrite(in4, HIGH);
 digitalWrite(in5, HIGH);
 digitalWrite(in6, LOW);
 digitalWrite(in7, HIGH);
 digitalWrite(in8, LOW);
}

void back_Control(){
 digitalWrite(in1, HIGH); 
 digitalWrite(in2, LOW);
 digitalWrite(in3, HIGH);
 digitalWrite(in4, LOW);
 digitalWrite(in5, LOW);
 digitalWrite(in6, HIGH);
 digitalWrite(in7, LOW);
 digitalWrite(in8, HIGH);
}

void move_right(){
 digitalWrite(in1, HIGH); 
 digitalWrite(in2, LOW);
 digitalWrite(in3, LOW);
 digitalWrite(in4, HIGH);
 digitalWrite(in5, LOW);
 digitalWrite(in6, HIGH);
 digitalWrite(in7, HIGH);
 digitalWrite(in8, LOW);
}

boolean touched (){
    limitSwitch.loop();
  
    int state = limitSwitch.getState();
    if(state == HIGH)
    {
      return false;
      Enes100.println("false");
    }
    else
    {
      return true;
      Enes100.println("true");
    }

      
}

int getDistanceLower() {
  digitalWrite(trig2Pin, LOW);
delayMicroseconds(20);
digitalWrite(trig2Pin, HIGH);
delayMicroseconds(100);
//Reads the echoPin, returns the sound wave travel time in microseconds
duration2 = pulseIn(echo2Pin, HIGH);
//Calculating the distance
distance2 = (duration2 * 0.034 ) / 2;
return distance2;
}

int height() {

for (int i = 0; i < 20; i++) {

  digitalWrite(trigPin, LOW);
  delayMicroseconds(20);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(100);
  //Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  //Calculating the distance
  distance = (duration * 0.034 ) / 2;
  
  digitalWrite(trig2Pin, LOW);
  delayMicroseconds(20);
  digitalWrite(trig2Pin, HIGH);
  delayMicroseconds(100);
  //Reads the echoPin, returns the sound wave travel time in microseconds
  duration2 = pulseIn(echo2Pin, HIGH);
  //Calculating the distance
  distance2 = (duration2 * 0.034 ) / 2;

}

if ((distance2 > 30 && distance > 30)) {
  
  return 13;
}
else if (distance2 < 30 && distance > 50) {

  return 18;
}
else{
  return 27;
}
}




float width2(int height, boolean isRed) {

  color = isRed;
  float xStart;
  
  float xEnd;
  
  float width;

  
    while (touched()) {
      move_left();
    }
    stop_OSV();
    
 //up to here is working
 
    speedControl();

    while (!touched()) {
      move_right();
    }
   
    stop_OSV();
  
    xStart = Enes100.getX();
  
    speedControl();
    while (touched()) {
      move_right();
    }
    stop_OSV();
    xEnd = Enes100.getX();
    Enes100.println(abs(xStart - xEnd));
    width = adjustWidth(100*abs(xStart - xEnd));
    Enes100.println(width);

    if (height == 13 && !isRed) {

      if (width == 27) {
        return 18;
      }
      else {
        return 27;
      }
     
    }
    else if (height == 13 && isRed) {
      return width;   
    }
    else if (height == 18 && !isRed) { 

        if (width == 27) {
          
          return 13.5;
        }
        else {
          
          return 27;
        }
      
    }
    else if (height == 18 && isRed) {
     return width;
    }
    else if (height == 27 && !isRed){ 

        if (width == 18) {
          return 13.5;
        }
        else {
          return 18;
        }
     
    }
    else { //height == 27 and isRed
      return width;   
    }

    

}

void placeMarker2(boolean isRed, int height) {

  Enes100.println(isRed);


  back_Control();
  delay(1000);
  stop_OSV();
  delay(500);
  start_turning_CCW(3.1);
  back_Control();
  if (height == 27) {
    delay(2000);
  }
  else {
    delay(3000);
  }
  move_left();
  delay(2000);
  move_right();
  delay(3000);
  start_turning_CCW(1.57);
  move_right();
  delay(4000);
  back_Control(); 
  delay(4000);
  move_left();
  delay(7000);
  move_right();
  delay(5000);
  back_Control();
  delay(500);
  stop_OSV();
    
  
   

}

void placeMarker1(boolean isRed, int height) {

  Enes100.println(isRed);


  back_Control();
  delay(1000);
  stop_OSV();
  delay(500);
  start_turning_CW(0);
  back_Control();
   if (height == 27) {
    delay(1500);
  }
  else {
    delay(3000);
  }
  move_left();
  delay(2000);
  move_right();
  delay(3000);
  start_turning_CCW(1.53);
  move_right();
  delay(7000);
  forward_Control(); 
  delay(4000);
  move_left();
  delay(7000);
  move_right();
  delay(2000);
  back_Control();
  delay(500);
  stop_OSV();
    
  
   

}

void moveSide(int dis, char dir) {

  int startY = Enes100.getY();

  if (dir == 'l') { //left

    while (abs(y - startY) < dis) {
      move_left();
      y = Enes100.getY();
    }
    stop_OSV();
  }

  if (dir == 'r') { //right

     while (abs(y - startY) < dis) {
      move_right();
      y = Enes100.getY();
     }
      stop_OSV();
  }
  
}


void move_left(){
 digitalWrite(in1, LOW); 
 digitalWrite(in2, HIGH);
 digitalWrite(in3, HIGH);
 digitalWrite(in4, LOW);
 digitalWrite(in5, HIGH);
 digitalWrite(in6, LOW);
 digitalWrite(in7, LOW);
 digitalWrite(in8, HIGH);
}

void start_turning_CW(float target){

while(abs(theta - target) >= 0.03) {
digitalWrite (in1, LOW);
digitalWrite (in2, HIGH);
digitalWrite (in3, LOW);
digitalWrite(in4, HIGH);
digitalWrite(in5, LOW);
digitalWrite(in6, HIGH);
digitalWrite(in7, LOW);
digitalWrite(in8, HIGH);
delay(15);
stop_OSV();
delay(25);
theta = Enes100.getTheta();
 }
stop_OSV();
}

void start_turning_CCW(float target){

while(abs(theta - target) >= 0.03) {
digitalWrite (in1, HIGH);
digitalWrite (in2, LOW);
digitalWrite (in3, HIGH);
digitalWrite(in4, LOW);
digitalWrite(in5, HIGH);
digitalWrite(in6, LOW);
digitalWrite(in7, HIGH);
digitalWrite(in8, LOW);
delay(15);
stop_OSV();
delay(25);
theta = Enes100.getTheta();
 }
stop_OSV();
}


void update_Variables() {

Enes100.updateLocation();

while (x < 0 || y < 0 || theta < -3.14 || theta > 3.14) {
Enes100.updateLocation();
;
y = Enes100.getY();


x = Enes100.getX();


theta = Enes100.getTheta();


delay(1000);
}


y = Enes100.getY();

x = Enes100.getX();


theta = Enes100.getTheta();

ultrasonic_Distance();


delay(1000);
}

boolean color_sensor(){
//Red
digitalWrite(s2,LOW);
digitalWrite(s3,LOW);
frequencyR = pulseIn(sensOUT, LOW);
delay(100);

//Green
digitalWrite(s2,HIGH);
digitalWrite(s3,HIGH);
frequencyG = pulseIn(sensOUT, LOW);
delay(100);

//Blue
digitalWrite(s2,LOW);
digitalWrite(s3,HIGH);
frequencyB = pulseIn(sensOUT, LOW);
delay(100);

if (((frequencyB - frequencyR) > 100) && ((frequencyG - frequencyR) > 100) && frequencyR < 250) {
  Enes100.println ("The box is red.");
  color = true;
  return true;
} else {
  Enes100.println("The box is not red.");
  color = false;
  return false;
}
}

void setup() {

  limitSwitch.setDebounceTime(50); // set debounce time to 50 milliseconds

//TEST ARUCO MARKER IS 19 BUT ACTUAL IS 231
Enes100.begin("CRASH", CRASH_SITE, 231, 50, 22); 

//Color sensor pins

pinMode(sensOUT, INPUT);
pinMode(s0, OUTPUT);
pinMode(s1, OUTPUT);
pinMode(s2, OUTPUT);
pinMode(s3, OUTPUT);

digitalWrite (s0, HIGH);
digitalWrite (s1, LOW);

//Motor pins
pinMode(enA, OUTPUT);
pinMode(enB, OUTPUT);
pinMode(enC, OUTPUT);
pinMode(enD, OUTPUT);
pinMode(in1, OUTPUT);
pinMode(in2, OUTPUT);
pinMode(in3, OUTPUT);
pinMode(in4, OUTPUT);
pinMode(in5, OUTPUT);
pinMode(in6, OUTPUT);
pinMode(in7, OUTPUT);
pinMode(in8, OUTPUT);

//Ultrasonic sensor pins
pinMode(trigPin, OUTPUT);
pinMode(trig2Pin, OUTPUT);
pinMode(echoPin, INPUT);
pinMode(echo2Pin, INPUT);
}

void loop() {

//Updates x and Y arcuo marker values
Enes100.updateLocation(); 
  
//Is the aruco marker visible?
bool v = Enes100.isVisible(); 
  
//Initial location
update_Variables();
  
//Turn on Motors
speedControl(); 

y = Enes100.getY();
  

//POSITION 1
if (y < 1) { 
  start_turning_CCW(1.53);
  stop_OSV();
  delay(1000);

  speedControl();

  while(y < 1) {
    forward_Control();
    y = Enes100.getY();
  }
      
  stop_OSV();
  start_turning_CW(1.5);
  stop_OSV();
  delay(1000);

  Enes100.updateLocation();

  while(y < 1.2) {
    forward_Control();
    y = Enes100.getY();
  }

  stop_OSV();
  Enes100.print("The height is: ");
  int height2 = height();
  Enes100.println(height2);     

  //Ram into the box
  speedControl();
  forward_Control();
  delay(6000);
      
  stop_OSV();
  delay(2000);


  delay(1000);

  while(!touched()) {
    move_right();
  }
      
  float width3 = width2(height2, color_sensor());
  Enes100.print("Width: ");
  Enes100.println(width3);

  placeMarker1(color,height2);
  back_Control();
  delay(1000);
  stop_OSV();

  //Face obstacles
  start_turning_CW(0);

  //End Nav Pos 1

  //obstacle 1
  while (x < 2){
    forward_Control();

    while (touched()){
      stop_OSV();
      delay(500);
      back_Control();
      delay(500);
      move_right();
      delay(6000);

      //Update touched
      touched();
      }
    x = Enes100.getX();
  }

  stop_OSV();
  delay(2000);
  start_turning_CW(-0.2);

  //Ram into right wall
  move_right();
  delay(15000);

  //Move left a bit
  move_left();
  delay(2000);


  //obstacle 2
  while (x < 3){
    forward_Control();

    while (touched()) {
      stop_OSV();
      delay(500);
      back_Control();
      delay(500);
      move_left();
      delay(6000);

      //Update touched
      touched();
    }
    x = Enes100.getX();
  }  

//Ram into left wall


move_left();
delay(5000);
back_Control();
delay(1050);
move_left();
delay(5000);
back_Control();
delay(1050);
move_left();
delay(5000);

stop_OSV();
delay(1000);

//Position to go under limbo
speedControl(); 
move_right();
delay(3000);

//Go under limbo   
speedControl();
forward_Control();
delay(10000);
stop_OSV();
delay(10000);
}

else {
  start_turning_CCW(-1.6);
  stop_OSV();
  delay(1000);

  speedControl();

  while(y > 1) {
    forward_Control();
    y = Enes100.getY();
  }
      
  stop_OSV();
  start_turning_CW(-1.57);
  stop_OSV();
  delay(1000);

  Enes100.updateLocation();

  while(y > 0.7) {
    forward_Control();
    y = Enes100.getY();
  }

  stop_OSV();
  Enes100.print("The height is: ");
  int height2 = height();
  Enes100.println(height2);     

  //Ram into the box
  speedControl();
  forward_Control();
  delay(8000);
      
  stop_OSV();
  delay(2000);

  delay(1000);

  while(!touched()) {
    move_right();
  }
      
  float width3 = width2(height2, color_sensor());
  Enes100.print("Width: ");
  Enes100.println(width3);

  placeMarker2(color, height2);

  //Face obstacles
  back_Control();
  delay(800);
  start_turning_CW(0);

  move_right(); //get to right side 
  delay(3000);

  //End Nav Pos 2

  //Obstacle 1
  while (x < 2){
    forward_Control();

    //When touched, move back and move left
    while (touched()){
      stop_OSV();
      delay(500);
      back_Control();
      delay(500);
      move_left();
      delay(6000);

      //Update touched
      touched();
      }
    x = Enes100.getX();
  }

  stop_OSV();
  delay(1000);
  start_turning_CW(-0.2);

  //Ram into right wall
  move_right();
  delay(15000);

  //Move left a bit
  move_left();
  delay(2000);


  //obstacle 2
  while (x < 3.2){
    forward_Control();

    //When touched, move back, and move left
    while (touched()) {
      stop_OSV();
      delay(500);
      back_Control();
      delay(500);
      move_left();
      delay(6000);

      //Update touched
      touched();
    }
    x = Enes100.getX();
  }  

//Ram into left wall
move_left();
delay(5000);
back_Control();
delay(1050);
move_left();
delay(5000);
back_Control();
delay(1050);
move_left();
delay(5000);


stop_OSV();
delay(1000);

//Position to go under limbo
speedControl(); 
move_right();
delay(3000);

//Go under limbo   
speedControl();
forward_Control();
delay(8000);
stop_OSV();
delay(10000);
}

}

